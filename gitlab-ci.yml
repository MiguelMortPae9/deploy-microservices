stages:
  - quality
  - security
  - build
  - test
  - deploy

laravel/pint:
  stage: quality
  image: php:8.4-cli
  variables:
    COMPOSER_CACHE_DIR: "$CI_PROJECT_DIR/.composer/cache"
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - .composer/cache # Cache de Composer
  before_script:
    - echo "Instalando dependencias del sistema..."
    - apt-get update && apt-get install -y git unzip curl libpng-dev libjpeg-dev libfreetype6-dev libxml2-dev libzip-dev libonig-dev libicu-dev libpq-dev
    - echo "Configurando PHP..."
    - docker-php-ext-install bcmath gd intl mbstring pdo pdo_pgsql xml zip
    - echo "Descargando Composer..."
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - echo "Instalando dependencias del proyecto..."
    - composer install --no-interaction --prefer-dist
    - echo "Ejecutando Pint..."
    - ./vendor/bin/pint --test
  only:
    - merge_requests
    - master
    - staging
  allow_failure: false

vulnerabilities_scan:
  stage: security
  image: returntocorp/semgrep
  script:
    - echo "🔍 Escaneo de vulnerabilidades con Semgrep"
    - semgrep --config=auto .
  only:
    - merge_requests
    - staging
    - master
  allow_failure: false

build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "Construyendo la imagen Docker..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker build -t "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA" ./docker
    - docker push "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:develop-latest"
    - echo "IMAGE_TAG=$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA" > build.env
  artifacts:
    reports:
      dotenv: build.env
  only:
    - merge_requests
    - staging
    - master

test_application:
  stage: test
  image: $IMAGE_TAG # usa la variable generada por el artifact
  needs:
    - job: build_image
      artifacts: true # indica que necesita los artifacts de build_image
  script:
    - echo "Ejecutando tests en la imagen $IMAGE_TAG"
    - php artisan test

deploy_application:
  stage: deploy
  image: php:8.4-cli
  needs:
    - job: build_image
      artifacts: true
  variables:
    DEPLOY_ENV: "staging"
  before_script:
    - apt-get update && apt-get install -y git unzip curl libzip-dev libicu-dev libxml2-dev zlib1g-dev libonig-dev
    - docker-php-ext-install zip intl mbstring
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --no-dev --no-interaction --prefer-dist
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - printf "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
    - |
      ENV_UPPER=$(echo "$DEPLOY_ENV" | tr '[:lower:]' '[:upper:]')
      ENV_ENCRYPTED=$(printenv "ENV_${ENV_UPPER}_ENCRYPTED")
      ENV_KEY=$(printenv "ENV_${ENV_UPPER}_KEY")
      [ -n "$ENV_ENCRYPTED" ] && [ -n "$ENV_KEY" ] || { echo "Faltan variables ENV_${ENV_UPPER}_ENCRYPTED o ENV_${ENV_UPPER}_KEY"; exit 1; }
      export ENV_ENCRYPTED ENV_KEY
  script:
    # Descifrar .env en CI (no en el servidor ni en contenedor de la app)
    - printf "%s" "$ENV_ENCRYPTED" > .env.encrypted
    - php artisan env:decrypt --force --key="$ENV_KEY" --env="$DEPLOY_ENV"

    # Preparar servidor y copiar archivos sin secretos en disco persistente
    - ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST" "mkdir -p '$DEPLOY_PATH'"
    - ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST" "cat > '$DEPLOY_PATH/docker-compose.yml'" < docker-compose.yml

    # Subir .env descifrado a tmpfs del servidor y enlazarlo en el path del proyecto
    - |
      ENV_TMP_PATH="/dev/shm/${CI_PROJECT_NAME}_${DEPLOY_ENV}.env"
      ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST" "cat > '$ENV_TMP_PATH'" < .env
      ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST" "ln -sf '$ENV_TMP_PATH' '$DEPLOY_PATH/.laravel.env' && chmod 600 '$ENV_TMP_PATH'"

    # Login al registry y despliegue usando la imagen construida
    - ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST" "docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' '$CI_REGISTRY' && docker pull '$IMAGE_TAG'"
    - >
      ssh -i ~/.ssh/id_ed25519 "$DEPLOY_USER@$DEPLOY_HOST"
      "cd '$DEPLOY_PATH' &&
       APP_IMAGE='$IMAGE_TAG' HOST_HTTP_PORT='${HOST_HTTP_PORT:-80}' CONTAINER_HTTP_PORT='${CONTAINER_HTTP_PORT:-8000}' docker compose up -d | cat &&
       docker compose exec -T app php artisan migrate --force"
  only:
    - staging
